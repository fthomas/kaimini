GSLDriver:
 - runSimulatedAnnealing:
   - make it work!
   - gsl_vector_dist needs to be replaced by a function that measures
     distance as change in chi^2

SLHAWorker:
 - selectCalculator:
   - sanitize user input (http://xkcd.com/327/)
 - make chiSq() thread-safe

general:
 - the SLHAWorker hierarchy feels very stateful; can this be improved?
 - keep the test suite up-to-date
 - handle stalled calculators gracefully
 - use a special signal to interrupt the driver and to shutdown SLHAWorker
 - write my own parameters class that handles change of basis and that has
   (a)symmetric errors
 - let the user choose between different test functions
 - unify the output to stdout and make it easier to parse
 - add mechanism to store the calculations for intermediate parameter points
 - allow arbitrary combinations of data points, and not only sums
 - use external interpreter for dynamic adaption of parameters and data
   points. Possible tools could be CINT, Lua, Python, Ruby, QtScript (insane!),
   ChaiScript. maybe it would be easier to use my own control file instead
 - make Minuit and GSL optional dependencies
 - add test tools for all possible interfaces (IPC mechanisms resp.) between
   Kaimini and the calculators: shared memory, other popular HEP file format,
   named pipes (?)
 - look into TBB; look for fitting tools at SF.net; Fityk
 - implement a swarm optimizer
 - give the possibility to ignore peaks in the fitness function
 - implement contours/scans
 - more than one calculator
 - paramter limits are only handled by Minuit, other drivers ignore them
 - smear datapoints within the input file
 - more output formats, esp. LaTeX! use a template system!
 - how to fit with asymmetric erros?
 - write a program that mimics a known minimum to test methods for error
   estimation
